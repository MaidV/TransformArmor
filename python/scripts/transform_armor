#!/usr/bin/env python3
import sys
from pathlib import Path
import json
import requests

from typing import List, Union, Tuple

from PyQt5.QtWidgets import (QTreeWidget, QTreeWidgetItem, QApplication, QWidget, QMainWindow, QAction, qApp,
                             QFileDialog, QHBoxLayout, QMenu, QInputDialog)
from PyQt5 import QtGui
import PyQt5.QtCore as QtCore

_armor_db: dict = {}


def update_armor_db(armors: dict):
    global _armor_db
    _armor_db = armors


def get_armor(abbr_key: Union[str, Tuple[str]]):
    global _armor_db

    if isinstance(abbr_key, str):
        mod, form = abbr_key.split('|')
    else:
        mod, form = abbr_key

    if mod in _armor_db and form in _armor_db[mod]:
        return mod, _armor_db[mod][form]
    else:
        print(f"Can't find {abbr_key} in armor database")
        return None, None


class MainWindow(QMainWindow):

    def __init__(self, armor_file: str = "", transform_file: str = ""):
        super(QMainWindow, self).__init__()
        self.setWindowTitle("TransformArmor")
        self.setGeometry(200, 200, 1280, 768)

        self._workspace = QHBoxLayout()

        self.window = QWidget()
        self.window.setLayout(self._workspace)
        self.setCentralWidget(self.window)

        self.init_menubar()

        self._aw = ArmorWidget()
        self._workspace.addWidget(self._aw)

        self._tw = TransformWidget()
        self._workspace.addWidget(self._tw)

        if armor_file:
            self.armor_open(armor_file)
        if transform_file:
            self.transform_open(transform_file)

    def init_menubar(self):
        openFile = QAction("&Open armor dump", self)
        openFile.setShortcut("Ctrl+O")
        openFile.setStatusTip('Open full armor database dump')
        openFile.triggered.connect(self.armor_open)

        openTransform = QAction("&Open transform file", self)
        openTransform.setShortcut("Ctrl+T")
        openTransform.setStatusTip('Open transform map')
        openTransform.setDisabled(True)
        openTransform.triggered.connect(self.transform_open)
        self.openTransformAction = openTransform

        saveTransform = QAction("&Save transform file", self)
        saveTransform.setShortcut("Ctrl+S")
        saveTransform.setStatusTip('Save transform map')
        saveTransform.triggered.connect(self.transform_save)

        exitAction = QAction('&Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit')
        exitAction.triggered.connect(qApp.quit)

        fileMenu = self.menuBar().addMenu('&File')
        fileMenu.addAction(openFile)
        fileMenu.addAction(openTransform)
        fileMenu.addAction(saveTransform)
        fileMenu.addAction(exitAction)

    def armor_open(self, name: str = ""):
        if not name:
            (name, _) = QFileDialog.getOpenFileName(self, 'Open armor dump file')
        if not Path(name).is_file():
            return

        with open(name, 'r') as file:
            try:
                armor_db = json.load(file)
                self._aw.update_contents(armor_db)
                self.openTransformAction.setEnabled(True)
                update_armor_db(armor_db)
            except json.JSONDecodeError:
                print("invalid json syntax (check for trailing commas, etc)")
            except ValueError:
                self._aw.clear()
                print("Invalid json for open armor")

    def transform_open(self, name: str = ""):
        if not name:
            (name, _) = QFileDialog.getOpenFileName(self, 'Open transform map')
        if not Path(name).is_file():
            return

        with open(name, 'r') as file:
            try:
                transform_db = json.load(file)
                self._tw.update_contents(transform_db)
            except json.JSONDecodeError:
                print("Invalid json syntax (check for trailing commas, etc")
            except ValueError:
                self._tw.clear()
                print("Invalid json for open transforms")

    def transform_save(self):
        (name, _) = QFileDialog.getSaveFileName(self, 'Save transform map')
        if not name:
            return

        self._tw.to_file(name)


class ModTree(QTreeWidgetItem):

    def __init__(self, mod: str):
        super(QTreeWidgetItem, self).__init__([mod, ""])
        self.setData(0, QtCore.Qt.UserRole, mod)


class ArmorItem(QTreeWidgetItem):

    def __init__(self, mod: str, form: str, record: dict):
        super(QTreeWidgetItem, self).__init__([record['formID'], record['name']])
        self.add_properties(record)
        self.record = record
        self.mod = mod
        self.form = record['formID']
        self.setData(0, QtCore.Qt.UserRole, (mod, form))

    def add_properties(self, record: dict):
        armortype = ArmorProperty(['ArmorType', record['type']])
        enchanted = ArmorProperty(['Enchanted', str(record['enchanted'])])
        armorslots = ArmorProperty(['Slots', str(record['slots'])])
        armorkws = ArmorProperty(['Keywords', str(record['keywords'])])

        self.addChild(armortype)
        self.addChild(enchanted)
        self.addChild(armorslots)
        self.addChild(armorkws)

    def equip(self):
        requests.post('http://127.0.0.1:8000/TryOutfit', json={'articles': [{'mod': self.mod, 'formID': self.form}]})


class ArmorProperty(QTreeWidgetItem):

    def __init__(self, args: List[str]):
        super(QTreeWidgetItem, self).__init__(args)
        self.setDisabled(True)


class ArmorWidget(QTreeWidget):

    def __init__(self, data: dict = {}, parent: Union[None, QWidget] = None):
        super(QTreeWidget, self).__init__(parent)
        self.setDragEnabled(True)
        self.slot_filter: Union[None, int] = None
        self.name_filter: Union[None, str] = None
        self.show_enchanted: bool = True
        self.kw_filter: Union[None, str] = None

    def contextMenuEvent(self, e: QtGui.QContextMenuEvent):
        menu = QMenu()
        selected = self.currentItem()

        slotText = 'Filter slot...' if self.slot_filter is None else f'Clear slot filter: {self.slot_filter}'
        filterSlots = menu.addAction(slotText)

        textText = 'Filter name...' if self.name_filter is None else f'Clear name filter: ({self.name_filter})'
        filterText = menu.addAction(textText)

        enchantedText = '[X] Show enchanted' if self.show_enchanted else '[ ] Show enchanted'
        filterEnchanted = menu.addAction(enchantedText)

        kwText = 'Filter keyword...' if self.kw_filter is None else f'Clear kw filter: ({self.kw_filter})'
        filterKWs = menu.addAction(kwText)

        equipElement = None
        if isinstance(selected, ArmorItem):
            payload = (selected.mod, selected.form)
            equipElement = menu.addAction(f'Equip item "{payload}")')

        res = menu.exec_(e.globalPos())
        if equipElement and res == equipElement:
            selected.equip()

        if res == filterSlots:
            if self.slot_filter:
                self.slot_filter = None
            else:
                self.slot_filter, _ = QInputDialog.getInt(self, 'Input', 'Enter slot to filter', value=32, min=30)

        if res == filterText:
            if self.name_filter:
                self.name_filter = None
            else:
                self.name_filter, _ = QInputDialog.getText(self, 'Input', 'Enter name filter')
                if not self.name_filter:
                    self.name_filter = None

        if res == filterEnchanted:
            self.show_enchanted = not self.show_enchanted

        if res == filterKWs:
            if self.kw_filter:
                self.kw_filter = None
            else:
                self.kw_filter, _ = QInputDialog.getText(self, 'Input', 'Enter keyword filter')
                if not self.kw_filter:
                    self.kw_filter = None

        self.rerun_filters()

    def rerun_filters(self):
        self.clear_filters()
        self.filter_text()
        self.filter_slot()
        self.filter_enchanted()
        self.filter_kw()
        self.filter_mods()

    def filter_enchanted(self):
        if self.show_enchanted:
            return
        for i in range(self.topLevelItemCount()):
            mod: ModTree = self.topLevelItem(i)
            for j in range(mod.childCount()):
                armor = mod.child(j)
                if armor.record['enchanted']:
                    armor.setHidden(True)

    def filter_mods(self):
        for i in range(self.topLevelItemCount()):
            mod: ModTree = self.topLevelItem(i)
            allhidden = True
            for j in range(mod.childCount()):
                if not mod.child(j).isHidden():
                    allhidden = False
                    continue
            if allhidden:
                mod.setHidden(True)

    def clear_filters(self):
        for i in range(self.topLevelItemCount()):
            mod: ModTree = self.topLevelItem(i)
            mod.setHidden(False)
            for j in range(mod.childCount()):
                mod.child(j).setHidden(False)

    def filter_slot(self):
        if self.slot_filter is None:
            return
        for i in range(self.topLevelItemCount()):
            mod: ModTree = self.topLevelItem(i)
            for j in range(mod.childCount()):
                armor = mod.child(j)
                if self.slot_filter not in armor.record['slots']:
                    armor.setHidden(True)

    def filter_text(self):
        if self.name_filter is None:
            return
        textsearch = self.name_filter.lower()

        for i in range(self.topLevelItemCount()):
            mod: ModTree = self.topLevelItem(i)
            for j in range(mod.childCount()):
                armor = mod.child(j)
                if textsearch not in armor.record['name'].lower():
                    armor.setHidden(True)

    def filter_kw(self):
        if self.kw_filter is None:
            return
        textsearch = self.kw_filter.lower()

        for i in range(self.topLevelItemCount()):
            mod: ModTree = self.topLevelItem(i)
            for j in range(mod.childCount()):
                armor = mod.child(j)
                hide = True
                for kw in armor.record['keywords']:
                    if textsearch in kw.lower():
                        hide = False
                if hide:
                    armor.setHidden(True)

    def update_contents(self, data: dict):
        self.clear()
        mods = []
        for modname in sorted(data.keys(), key=str.lower):
            mod = ModTree(modname)

            for form in sorted(data[modname].keys(), key=str.lower):
                armorname = ArmorItem(modname, form, data[modname][form])
                mod.addChild(armorname)

            if mod.childCount():
                mods.append(mod)

        self.setColumnCount(2)
        self.setHeaderLabels(["", ""])
        for mod in mods:
            self.addTopLevelItem(mod)
            mod.sortChildren(1, QtCore.Qt.SortOrder(0))


class TransformSource(QTreeWidgetItem):

    def __init__(self, mod: str, sourcearmor: dict, transforms: dict):
        super(QTreeWidgetItem, self).__init__([mod, sourcearmor['name']])
        self.mod = mod
        self.form = sourcearmor['formID']
        self.record = sourcearmor
        self.nextoutfitid = 0

        if not transforms:
            self.add_outfit({})
            return

        for outfitdict in transforms:
            self.add_outfit(outfitdict)

    def add_outfit(self, outfitdict: dict):
        outfit = TransformOutfit([str(self.nextoutfitid).rjust(3, '0'), ""])
        for trgform in outfitdict:
            outfit.add_armor(trgform)

        self.addChild(outfit)
        self.nextoutfitid += 1

    def equip(self):
        requests.post('http://127.0.0.1:8000/TryOutfit', json={'articles': [{'mod': self.mod, 'formID': self.form}]})


class TransformOutfit(QTreeWidgetItem):

    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)

    def add_armor(self, modform: str):
        (mod, armor) = get_armor(modform)
        if mod is None:
            return

        armorname = TransformItem(mod, armor)
        self.addChild(armorname)

    def equip(self):
        itemlist = []
        for iitem in range(self.childCount()):
            item: TransformItem = self.child(iitem)
            itemlist.append({'mod': item.mod, 'formID': item.form})

        requests.post('http://127.0.0.1:8000/TryOutfit', json={'articles': itemlist})


class TransformItem(QTreeWidgetItem):

    def __init__(self, mod: str, armor: dict):
        super(QTreeWidgetItem, self).__init__([mod, armor['name']])
        self.mod = mod
        self.form = armor['formID']
        self.record = armor

    def equip(self):
        requests.post('http://127.0.0.1:8000/TryOutfit', json={'articles': [{'mod': self.mod, 'formID': self.form}]})


class TransformWidget(QTreeWidget):

    def __init__(self, data: dict = {}, parent: Union[None, QWidget] = None):
        super(QTreeWidget, self).__init__(parent)
        self.setAcceptDrops(True)
        self.setColumnCount(2)
        self.setHeaderLabels(["", ""])

    def update_contents(self, transforms: dict):
        self.clear()
        rows = []
        for srcform in transforms.keys():
            (srcmod, srcarmor) = get_armor(srcform)
            if srcmod is None:
                continue
            rows.append(TransformSource(srcmod, srcarmor, transforms[srcform]))

        for row in rows:
            self.addTopLevelItem(row)

        self.sortByColumn(0, QtCore.Qt.SortOrder(0))
        self.sortByColumn(1, QtCore.Qt.SortOrder(0))

    def contextMenuEvent(self, e: QtGui.QContextMenuEvent):
        menu = QMenu()
        selected = self.currentItem()

        deleteTransformSource = None
        deleteTransformOutfit = None
        deleteTransformItem = None
        addTransformOutfit = None
        equipElement = None
        if isinstance(selected, TransformSource):
            payload = (selected.mod, selected.form)
            deleteTransformSource = menu.addAction(f'Delete source "{payload}"')
            addTransformOutfit = menu.addAction(f'Add new outfit')
            equipElement = menu.addAction(f'Equip source "{payload}")')
        if isinstance(selected, TransformOutfit):
            payload = selected.text(0)
            deleteTransformOutfit = menu.addAction(f'Delete outfit "{payload}"')
            equipElement = menu.addAction(f'Equip outfit "{payload}"')
        if isinstance(selected, TransformItem):
            payload = (selected.mod, selected.form)
            deleteTransformItem = menu.addAction(f'Delete item "{payload}"')
            equipElement = menu.addAction(f'Equip item "{payload}"')

        res = menu.exec_(e.globalPos())
        if deleteTransformSource and res == deleteTransformSource:
            self.remove_transform_source(selected)
        if deleteTransformOutfit and res == deleteTransformOutfit:
            self.remove_transform_outfit(selected)
        if deleteTransformItem and res == deleteTransformItem:
            self.remove_transform_item(selected)
        if addTransformOutfit and res == addTransformOutfit:
            selected.add_outfit({})
        if equipElement and res == equipElement:
            selected.equip()

        self.sortByColumn(0, QtCore.Qt.SortOrder(0))
        self.sortByColumn(1, QtCore.Qt.SortOrder(0))

    def add_source(self, mod, form):
        (srcmod, srcarmor) = get_armor((mod, form))
        if not 32 in srcarmor['slots']:
            print("Slot 32 currently required")
            return
        for isource in range(self.topLevelItemCount()):
            source: TransformSource = self.topLevelItem(isource)
            if mod == source.mod and form == source.form:
                print("Source already exists")
                return

        self.addTopLevelItem(TransformSource(srcmod, srcarmor, {}))

    def dropEvent(self, e: QtGui.QDropEvent) -> None:
        source = e.source().currentItem()
        target = self.itemFromIndex(self.indexAt(e.pos()))
        if isinstance(source, ArmorItem):
            mod, form = source.data(0, QtCore.Qt.UserRole)
            if isinstance(target, TransformItem):
                target = target.parent()
                target.add_armor('|'.join((mod, form)))
            elif isinstance(target, TransformOutfit):
                target.add_armor('|'.join((mod, form)))
            elif isinstance(target, TransformSource) or isinstance(target, TransformWidget):
                self.add_source(mod, form)
                self.sortByColumn(0, QtCore.Qt.SortOrder(0))
                self.sortByColumn(1, QtCore.Qt.SortOrder(0))

    def remove_transform_source(self, item: TransformSource):
        payload = item.data(0, QtCore.Qt.UserRole)
        self.takeTopLevelItem(self.indexOfTopLevelItem(item))

    def remove_transform_outfit(self, outfit: TransformOutfit):
        outfit.parent().removeChild(outfit)

    def remove_transform_item(self, item: TransformItem):
        item.parent().removeChild(item)

    def to_file(self, path: str):
        with open(path, 'w') as file:
            file.write(self.to_json())

    def to_json(self) -> str:
        db = {}

        for isource in range(self.topLevelItemCount()):
            source: TransformSource = self.topLevelItem(isource)
            outlist = []
            for ioutfit in range(source.childCount()):
                outfit: TransformOutfit = source.child(ioutfit)
                itemlist = []
                for iitem in range(outfit.childCount()):
                    item: TransformItem = outfit.child(iitem)
                    itemlist.append(f'{item.mod}|{item.form}')
                outlist.append(itemlist)
            skey = f'{source.mod}|{source.form}'
            db[skey] = outlist

        return json.dumps(db, indent=2)


if __name__ == '__main__':
    app = QApplication(sys.argv)

    w = MainWindow(*sys.argv[1:])
    w.show()

    sys.exit(app.exec_())
