#!/usr/bin/env python3
import sys
from pathlib import Path
import json

from PyQt5.QtWidgets import (QTreeWidget, QTreeWidgetItem, QApplication, QWidget, 
                             QMainWindow, QAction, qApp, QFileDialog, QHBoxLayout)

class MainWindow(QMainWindow):
    def __init__(self):
        super(QMainWindow, self).__init__()
        self.setWindowTitle("TransformArmor")
        self.setGeometry(200, 200, 1024, 768)

        self.workspace = QHBoxLayout()

        self.window = QWidget()
        self.window.setLayout(self.workspace)
        self.setCentralWidget(self.window)

        self.init_menubar()

        self.aw = ArmorWidget()
        self.workspace.addWidget(self.aw)
        
    def init_menubar(self):
        openFile = QAction("&Open armor dump", self)
        openFile.setShortcut("Ctrl+O")
        openFile.setStatusTip('Open full armor database dump')
        openFile.triggered.connect(self.file_open)

        exitAction = QAction('&Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit')
        exitAction.triggered.connect(qApp.quit)

        fileMenu = self.menuBar().addMenu('&File')
        fileMenu.addAction(openFile)
        fileMenu.addAction(exitAction)

    def file_open(self):
        name = QFileDialog.getOpenFileName(self, 'Open armor dump file')
        if not Path(name[0]).is_file():
            return

        with open(name[0], 'r') as file:
            armors = json.load(file)
            self.aw.update_contents(armors)


class ArmorWidget(QTreeWidget):
    def __init__(self, data={}, parent=None):
        super(QTreeWidget, self).__init__(parent)
        self.update_contents(data)

    def update_contents(self, data):
        self.clear()
        rows = []
        for mod in sorted(data.keys(), key=str.lower):
            row = QTreeWidgetItem([mod, ""])

            for form in sorted(data[mod].keys(), key=str.lower):
                record = data[mod][form]
                if 32 not in record['slots']:
                    continue
                armorname = QTreeWidgetItem([record['name'] + ' (' + record['formID'] + ')', ""])
                armortype = QTreeWidgetItem(['ArmorType', record['type']])
                enchanted = QTreeWidgetItem(['Enchanted', str(record['enchanted'])])
                armorslots = QTreeWidgetItem(['Slots', str(record['slots'])])
                
                armorname.addChild(armortype)
                armorname.addChild(enchanted)
                armorname.addChild(armorslots)
                row.addChild(armorname)
            
            if row.childCount():
                rows.append(row)


        self.setColumnCount(2)
        self.setHeaderLabels(["", "Value"])
        for row in rows:
            self.addTopLevelItem(row)


if __name__ == '__main__':
    app = QApplication(sys.argv)

    w = MainWindow()
    w.show()

    sys.exit(app.exec_())
