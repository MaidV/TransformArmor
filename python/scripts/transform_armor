#!/usr/bin/env python3
import sys
from pathlib import Path
import json

from PyQt5.QtWidgets import (QTreeWidget, QTreeWidgetItem, QApplication, QWidget,
                             QMainWindow, QAction, qApp, QFileDialog, QHBoxLayout, QMenu)
import PyQt5.QtCore as QtCore

def get_armor(armors, abbr_key):
    mod, form = abbr_key.split('|')
    if mod in armors and form in armors[mod]:
        return mod, armors[mod][form]
    else:
        print(f"Can't find {abbr_key} in armor database")
        return None, None

class MainWindow(QMainWindow):
    def __init__(self):
        super(QMainWindow, self).__init__()
        self.setWindowTitle("TransformArmor")
        self.setGeometry(200, 200, 1024, 768)

        self.workspace = QHBoxLayout()

        self.window = QWidget()
        self.window.setLayout(self.workspace)
        self.setCentralWidget(self.window)

        self.init_menubar()

        self.aw = ArmorWidget()
        self.workspace.addWidget(self.aw)

        self.tw = TransformWidget()
        self.workspace.addWidget(self.tw)

        self._armor_db = {}

    def init_menubar(self):
        openFile = QAction("&Open armor dump", self)
        openFile.setShortcut("Ctrl+O")
        openFile.setStatusTip('Open full armor database dump')
        openFile.triggered.connect(self.armor_open)

        openTransform = QAction("&Open transform file", self)
        openTransform.setShortcut("Ctrl+T")
        openTransform.setStatusTip('Open transform map')
        openTransform.setDisabled(True)
        openTransform.triggered.connect(self.transform_open)
        self.openTransformAction = openTransform

        saveTransform = QAction("&Save transform file", self)
        saveTransform.setShortcut("Ctrl+S")
        saveTransform.setStatusTip('Save transform map')
        saveTransform.triggered.connect(self.transform_save)

        exitAction = QAction('&Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit')
        exitAction.triggered.connect(qApp.quit)

        fileMenu = self.menuBar().addMenu('&File')
        fileMenu.addAction(openFile)
        fileMenu.addAction(openTransform)
        fileMenu.addAction(saveTransform)
        fileMenu.addAction(exitAction)

    def armor_open(self):
        name = QFileDialog.getOpenFileName(self, 'Open armor dump file')
        if not Path(name[0]).is_file():
            return

        with open(name[0], 'r') as file:
            try:
                armor_db = json.load(file)
                self.aw.update_contents(armor_db)
                self.openTransformAction.setEnabled(True)
                self._armor_db = armor_db
            except json.JSONDecodeError:
                print("invalid json syntax (check for trailing commas, etc)")
            except ValueError:
                self.aw.clear()
                print("Invalid json for open armor")

                
    def transform_open(self):
        (name, _) = QFileDialog.getOpenFileName(self, 'Open transform map')
        if not Path(name).is_file():
            return

        with open(name, 'r') as file:
            try:
                transform_db = json.load(file)
                self.tw.update_contents(transform_db, self._armor_db)
            except json.JSONDecodeError:
                print("Invalid json syntax (check for trailing commas, etc")
            except ValueError:
                self.tw.clear()
                print("Invalid json for open transforms")

    def transform_save(self):
        (name, _) = QFileDialog.getSaveFileName(self, 'Save transform map')
        if not name:
            return

        self.tw.to_file(name)


class ModTree(QTreeWidgetItem):
    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)

class ArmorItem(QTreeWidgetItem):
    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)

class ArmorWidget(QTreeWidget):
    def __init__(self, data={}, parent=None):
        super(QTreeWidget, self).__init__(parent)

    def update_contents(self, data):
        self.clear()
        rows = []
        for mod in sorted(data.keys(), key=str.lower):
            row = ModTree([mod, ""])
            row.setData(0, QtCore.Qt.UserRole, mod)

            for form in sorted(data[mod].keys(), key=str.lower):
                record = data[mod][form]

                armorname = ArmorItem([record['name'] + ' (' + record['formID'] + ')', ""])
                armorname.setData(0, QtCore.Qt.UserRole, (mod, form))

                armortype = QTreeWidgetItem(['ArmorType', record['type']])
                enchanted = QTreeWidgetItem(['Enchanted', str(record['enchanted'])])
                armorslots = QTreeWidgetItem(['Slots', str(record['slots'])])

                armorname.addChild(armortype)
                armorname.addChild(enchanted)
                armorname.addChild(armorslots)
                row.addChild(armorname)

            if row.childCount():
                rows.append(row)

        self.setColumnCount(2)
        self.setHeaderLabels(["", "Value"])
        for row in rows:
            self.addTopLevelItem(row)

class TransformSource(QTreeWidgetItem):
    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)

class TransformWidget(QTreeWidget):
    def __init__(self, data={}, parent=None):
        super(QTreeWidget, self).__init__(parent)
        self._transform_db = {}

    def update_contents(self, transforms, armors):
        self.clear()
        rows = []
        for srcform in sorted(transforms.keys(), key=str.lower):
            (srcmod, srcarmor) = get_armor(armors, srcform)
            if srcmod is None:
                continue
            row = TransformSource([f"{srcarmor['name']} ({srcmod})"])
            row.setData(0, QtCore.Qt.UserRole, (srcmod, srcform.split('|')[1]))

            for i, outfit in enumerate(transforms[srcform]):
                subrows = QTreeWidgetItem([str(i)])
                for trgform in outfit:
                    (mod, armor) = get_armor(armors, trgform)
                    if mod is None:
                        continue
                    armorname = QTreeWidgetItem([f"{armor['name']} ({mod})"])
                    subrows.addChild(armorname)

                row.addChild(subrows)

            rows.append(row)

        self.setColumnCount(1)
        self.setHeaderLabels(["Value"])

        for row in rows:
            self.addTopLevelItem(row)

        self._transform_db = transforms

    def contextMenuEvent(self, event):
        menu = QMenu()
        selected = self.currentItem()
        
        deleteTransformSource = None
        if isinstance(selected, TransformSource):
            payload = selected.data(0, QtCore.Qt.UserRole)
            deleteTransformSource = menu.addAction(f'Delete "{payload}"')

        res = menu.exec_(event.globalPos())
        if deleteTransformSource and res == deleteTransformSource:
            self.remove_transform_source(selected)

    def remove_transform_source(self, item):
        payload = item.data(0, QtCore.Qt.UserRole)
        del self._transform_db['|'.join(payload)]
        self.takeTopLevelItem(self.indexOfTopLevelItem(item))

    def to_file(self, path):
        with open(path, 'w') as file:
            json.dump(self._transform_db, file, indent=2)

if __name__ == '__main__':
    app = QApplication(sys.argv)

    w = MainWindow()
    w.show()

    sys.exit(app.exec_())
