#!/usr/bin/env python3
import sys
from pathlib import Path
import json

from typing import List, Union, Tuple

from PyQt5.QtWidgets import (QTreeWidget, QTreeWidgetItem, QApplication, QWidget, QMainWindow, QAction, qApp,
                             QFileDialog, QHBoxLayout, QMenu)
from PyQt5 import QtGui
import PyQt5.QtCore as QtCore

_armor_db: dict = {}
_transform_db: dict = {}


def update_armor_db(armors: dict):
    global _armor_db
    _armor_db = armors


def update_transform_db(transforms: dict):
    global _transform_db
    _transform_db = transforms


def get_armor(abbr_key: Union[str, Tuple[str]]):
    global _armor_db

    if isinstance(abbr_key, str):
        mod, form = abbr_key.split('|')
    else:
        mod, form = abbr_key

    if mod in _armor_db and form in _armor_db[mod]:
        return mod, _armor_db[mod][form]
    else:
        print(f"Can't find {abbr_key} in armor database")
        return None, None


class MainWindow(QMainWindow):

    def __init__(self, armor_file: str = "", transform_file: str = ""):
        super(QMainWindow, self).__init__()
        self.setWindowTitle("TransformArmor")
        self.setGeometry(200, 200, 1280, 768)

        self._workspace = QHBoxLayout()

        self.window = QWidget()
        self.window.setLayout(self._workspace)
        self.setCentralWidget(self.window)

        self.init_menubar()

        self._aw = ArmorWidget()
        self._workspace.addWidget(self._aw)

        self._tw = TransformWidget()
        self._workspace.addWidget(self._tw)

        if armor_file:
            self.armor_open(armor_file)
        if transform_file:
            self.transform_open(transform_file)

    def init_menubar(self):
        openFile = QAction("&Open armor dump", self)
        openFile.setShortcut("Ctrl+O")
        openFile.setStatusTip('Open full armor database dump')
        openFile.triggered.connect(self.armor_open)

        openTransform = QAction("&Open transform file", self)
        openTransform.setShortcut("Ctrl+T")
        openTransform.setStatusTip('Open transform map')
        openTransform.setDisabled(True)
        openTransform.triggered.connect(self.transform_open)
        self.openTransformAction = openTransform

        saveTransform = QAction("&Save transform file", self)
        saveTransform.setShortcut("Ctrl+S")
        saveTransform.setStatusTip('Save transform map')
        saveTransform.triggered.connect(self.transform_save)

        exitAction = QAction('&Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit')
        exitAction.triggered.connect(qApp.quit)

        fileMenu = self.menuBar().addMenu('&File')
        fileMenu.addAction(openFile)
        fileMenu.addAction(openTransform)
        fileMenu.addAction(saveTransform)
        fileMenu.addAction(exitAction)

    def armor_open(self, name: str = ""):
        if not name:
            (name, _) = QFileDialog.getOpenFileName(self, 'Open armor dump file')
        if not Path(name).is_file():
            return

        with open(name, 'r') as file:
            try:
                armor_db = json.load(file)
                self._aw.update_contents(armor_db)
                self.openTransformAction.setEnabled(True)
                update_armor_db(armor_db)

            except json.JSONDecodeError:
                print("invalid json syntax (check for trailing commas, etc)")
            except ValueError:
                self._aw.clear()
                print("Invalid json for open armor")

    def transform_open(self, name: str = ""):
        if not name:
            (name, _) = QFileDialog.getOpenFileName(self, 'Open transform map')
        if not Path(name).is_file():
            return

        with open(name, 'r') as file:
            try:
                transform_db = json.load(file)
                self._tw.update_contents(transform_db)
                global _transform_db
                _transform_db = transform_db
            except json.JSONDecodeError:
                print("Invalid json syntax (check for trailing commas, etc")
            except ValueError:
                self._tw.clear()
                print("Invalid json for open transforms")

    def transform_save(self):
        (name, _) = QFileDialog.getSaveFileName(self, 'Save transform map')
        if not name:
            return

        self._tw.to_file(name)


class ModTree(QTreeWidgetItem):

    def __init__(self, mod: str):
        super(QTreeWidgetItem, self).__init__([mod, ""])
        self.setData(0, QtCore.Qt.UserRole, mod)


class ArmorItem(QTreeWidgetItem):

    def __init__(self, mod: str, form: str, record: dict):
        super(QTreeWidgetItem, self).__init__([record['formID'], record['name']])
        self.add_properties(record)
        self.setData(0, QtCore.Qt.UserRole, (mod, form))

    def add_properties(self, record: dict):
        armortype = ArmorProperty(['ArmorType', record['type']])
        enchanted = ArmorProperty(['Enchanted', str(record['enchanted'])])
        armorslots = ArmorProperty(['Slots', str(record['slots'])])

        self.addChild(armortype)
        self.addChild(enchanted)
        self.addChild(armorslots)


class ArmorProperty(QTreeWidgetItem):

    def __init__(self, args: List[str]):
        super(QTreeWidgetItem, self).__init__(args)
        self.setDisabled(True)


class ArmorWidget(QTreeWidget):

    def __init__(self, data: dict = {}, parent: Union[None, QWidget] = None):
        super(QTreeWidget, self).__init__(parent)
        self.setDragEnabled(True)

    def update_contents(self, data: dict):
        self.clear()
        mods = []
        for modname in sorted(data.keys(), key=str.lower):
            mod = ModTree(modname)

            for form in sorted(data[modname].keys(), key=str.lower):
                armorname = ArmorItem(modname, form, data[modname][form])
                mod.addChild(armorname)

            if mod.childCount():
                mods.append(mod)

        self.setColumnCount(2)
        self.setHeaderLabels(["", ""])
        for mod in mods:
            self.addTopLevelItem(mod)
            mod.sortChildren(1, QtCore.Qt.SortOrder(0))


class TransformSource(QTreeWidgetItem):

    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)


class TransformOutfit(QTreeWidgetItem):

    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)

    def add_armor(self, mod: str, form: str):
        (_, armor) = get_armor((mod, form))
        armorname = TransformItem([f"{armor['name']} ({mod})"])
        self.addChild(armorname)


class TransformItem(QTreeWidgetItem):

    def __init__(self, args):
        super(QTreeWidgetItem, self).__init__(args)


class TransformWidget(QTreeWidget):

    def __init__(self, data: dict = {}, parent: Union[None, QWidget] = None):
        super(QTreeWidget, self).__init__(parent)
        self.setAcceptDrops(True)

    def update_contents(self, transforms: dict):
        self.clear()
        rows = []
        for srcform in transforms.keys():
            (srcmod, srcarmor) = get_armor(srcform)
            if srcmod is None:
                continue
            row = TransformSource([srcmod, srcarmor['name']])
            row.setData(0, QtCore.Qt.UserRole, (srcmod, srcform.split('|')[1]))

            # FIXME: Refactor so TransformOutfits are deletable from database
            for i, outfit in enumerate(transforms[srcform]):
                subrows = TransformOutfit([str(i)])
                for trgform in outfit:
                    (mod, armor) = get_armor(trgform)
                    if mod is None:
                        continue
                    armorname = TransformItem([f"{armor['name']} ({mod})"])
                    subrows.addChild(armorname)

                row.addChild(subrows)

            rows.append(row)

        self.setColumnCount(2)
        self.setHeaderLabels(["", ""])

        for row in rows:
            self.addTopLevelItem(row)

        self.sortByColumn(0, QtCore.Qt.SortOrder(0))
        self.sortByColumn(1, QtCore.Qt.SortOrder(0))

    def contextMenuEvent(self, e: QtGui.QContextMenuEvent):
        menu = QMenu()
        selected = self.currentItem()

        deleteTransformSource = None
        deleteTransformOutfit = None
        if isinstance(selected, TransformSource):
            payload = selected.data(0, QtCore.Qt.UserRole)
            deleteTransformSource = menu.addAction(f'Delete "{payload}"')
        if isinstance(selected, TransformOutfit):
            payload = selected.data(0, QtCore.Qt.UserRole)
            deleteTransformOutfit = menu.addAction(f'Delete "{payload}"')

        res = menu.exec_(e.globalPos())
        if deleteTransformSource and res == deleteTransformSource:
            self.remove_transform_source(selected)
        if deleteTransformOutfit and res == deleteTransformOutfit:
            self.remove_transform_outfit(selected)

    def dropEvent(self, e: QtGui.QDropEvent) -> None:
        source = e.source().currentItem()
        target = self.itemFromIndex(self.indexAt(e.pos()))
        if isinstance(source, ArmorItem):
            mod, form = source.data(0, QtCore.Qt.UserRole)
            if isinstance(target, TransformItem):
                target = target.parent()
            elif isinstance(target, TransformSource):
                return

            target.add_armor(mod, form)

    def remove_transform_source(self, item: TransformItem):
        payload = item.data(0, QtCore.Qt.UserRole)
        global _transform_db
        del _transform_db['|'.join(payload)]
        self.takeTopLevelItem(self.indexOfTopLevelItem(item))

    def remove_transform_outfit(self, outfit: TransformOutfit):
        payload = outfit.data(0, QtCore.Qt.UserRole)
        print(payload)

    def to_file(self, path: str):
        global _transform_db

        with open(path, 'w') as file:
            json.dump(_transform_db, file, indent=2)


if __name__ == '__main__':
    app = QApplication(sys.argv)

    print(sys.argv[1:])
    w = MainWindow(*sys.argv[1:])
    w.show()

    sys.exit(app.exec_())
